/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace StakeMeta {
  export type StakePlanStruct = {
    userId: BigNumberish;
    exists: boolean;
    plan: BigNumberish;
    uvm: BigNumberish;
    dnm: BigNumberish;
    land: BigNumberish;
    start: BigNumberish;
    finish: BigNumberish;
    stake_duration: BigNumberish;
    total_paid_out: BigNumberish;
  };

  export type StakePlanStructOutput = [
    BigNumber,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    userId: BigNumber;
    exists: boolean;
    plan: number;
    uvm: BigNumber;
    dnm: BigNumber;
    land: BigNumber;
    start: BigNumber;
    finish: BigNumber;
    stake_duration: BigNumber;
    total_paid_out: BigNumber;
  };
}

export interface StakeMetaInterface extends utils.Interface {
  functions: {
    "CONTACT_FINALIZED()": FunctionFragment;
    "DNM_TOKEN()": FunctionFragment;
    "EIGHTEEN_MONTH_DURATION()": FunctionFragment;
    "LAND_TOKEN()": FunctionFragment;
    "LAUNCH_TIME()": FunctionFragment;
    "ONE_YEAR_DURATION()": FunctionFragment;
    "REWARD_DECAY_PERIOD()": FunctionFragment;
    "SC_EXISTS()": FunctionFragment;
    "STAKE_LIST_ID()": FunctionFragment;
    "STAKE_MAX_DNM()": FunctionFragment;
    "STAKE_MAX_UVM()": FunctionFragment;
    "STAKE_MIN_DNM()": FunctionFragment;
    "TIME_STEP()": FunctionFragment;
    "TOP_UP_PHASE()": FunctionFragment;
    "TOTAL_DNM_STAKED()": FunctionFragment;
    "TOTAL_LAND_STAKED()": FunctionFragment;
    "TOTAL_REWARD()": FunctionFragment;
    "TOTAL_UVM_STAKED()": FunctionFragment;
    "TWO_YEAR_DURATION()": FunctionFragment;
    "USER_LIST_ID()": FunctionFragment;
    "UVM_FEE_BALANCE()": FunctionFragment;
    "UVM_POOL_BALANCE()": FunctionFragment;
    "UVM_TOKEN()": FunctionFragment;
    "addSideContract(address)": FunctionFragment;
    "addTokenToPool(uint256)": FunctionFragment;
    "allowedDnmAmountStake(uint8)": FunctionFragment;
    "calDnmUvmRatio(uint256)": FunctionFragment;
    "calculateReward(uint16,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateRewardForStake(uint256)": FunctionFragment;
    "dao()": FunctionFragment;
    "finalizeContract()": FunctionFragment;
    "getActiveStake()": FunctionFragment;
    "getAllStake()": FunctionFragment;
    "getContractDNMBalance()": FunctionFragment;
    "getContractUVMBalance()": FunctionFragment;
    "getFinishedStake()": FunctionFragment;
    "getPlanByTokenId(uint256)": FunctionFragment;
    "getStake(uint256)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserStake(address)": FunctionFragment;
    "getUserStakeIds(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeSideContract()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDao(address)": FunctionFragment;
    "stake(uint256,uint256,uint256)": FunctionFragment;
    "stakeFrom(address,uint256,uint256,uint256)": FunctionFragment;
    "stakeList(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRewardFromSideContract(uint256,address)": FunctionFragment;
    "updateTopUp()": FunctionFragment;
    "userList(uint256)": FunctionFragment;
    "withdrawAllowance((uint256,bool,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "withdrawFeeByDao(uint256,address)": FunctionFragment;
    "withdrawReward(uint256)": FunctionFragment;
    "withdrawStake(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTACT_FINALIZED"
      | "DNM_TOKEN"
      | "EIGHTEEN_MONTH_DURATION"
      | "LAND_TOKEN"
      | "LAUNCH_TIME"
      | "ONE_YEAR_DURATION"
      | "REWARD_DECAY_PERIOD"
      | "SC_EXISTS"
      | "STAKE_LIST_ID"
      | "STAKE_MAX_DNM"
      | "STAKE_MAX_UVM"
      | "STAKE_MIN_DNM"
      | "TIME_STEP"
      | "TOP_UP_PHASE"
      | "TOTAL_DNM_STAKED"
      | "TOTAL_LAND_STAKED"
      | "TOTAL_REWARD"
      | "TOTAL_UVM_STAKED"
      | "TWO_YEAR_DURATION"
      | "USER_LIST_ID"
      | "UVM_FEE_BALANCE"
      | "UVM_POOL_BALANCE"
      | "UVM_TOKEN"
      | "addSideContract"
      | "addTokenToPool"
      | "allowedDnmAmountStake"
      | "calDnmUvmRatio"
      | "calculateReward"
      | "calculateRewardForStake"
      | "dao"
      | "finalizeContract"
      | "getActiveStake"
      | "getAllStake"
      | "getContractDNMBalance"
      | "getContractUVMBalance"
      | "getFinishedStake"
      | "getPlanByTokenId"
      | "getStake"
      | "getUser"
      | "getUserStake"
      | "getUserStakeIds"
      | "owner"
      | "removeSideContract"
      | "renounceOwnership"
      | "setDao"
      | "stake"
      | "stakeFrom"
      | "stakeList"
      | "transferOwnership"
      | "transferRewardFromSideContract"
      | "updateTopUp"
      | "userList"
      | "withdrawAllowance"
      | "withdrawFeeByDao"
      | "withdrawReward"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTACT_FINALIZED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DNM_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EIGHTEEN_MONTH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAND_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAUNCH_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_DECAY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SC_EXISTS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "STAKE_LIST_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MAX_DNM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MAX_UVM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MIN_DNM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOP_UP_PHASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_DNM_STAKED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_LAND_STAKED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_UVM_STAKED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TWO_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_LIST_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UVM_FEE_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UVM_POOL_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UVM_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSideContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenToPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedDnmAmountStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calDnmUvmRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardForStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDNMBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractUVMBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinishedStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSideContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFrom",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRewardFromSideContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTopUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowance",
    values: [StakeMeta.StakePlanStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeByDao",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTACT_FINALIZED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DNM_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EIGHTEEN_MONTH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAND_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LAUNCH_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_DECAY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SC_EXISTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_LIST_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MAX_DNM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MAX_UVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MIN_DNM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOP_UP_PHASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_DNM_STAKED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_LAND_STAKED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_UVM_STAKED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TWO_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_LIST_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UVM_FEE_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UVM_POOL_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UVM_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSideContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedDnmAmountStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calDnmUvmRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardForStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDNMBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractUVMBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinishedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSideContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRewardFromSideContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTopUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeByDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "AddSideContract(address)": EventFragment;
    "AddTokenToPool(address,uint256)": EventFragment;
    "FinalizeContract(uint256)": EventFragment;
    "NewStake(uint256,uint8,uint256,uint256,uint256,uint256)": EventFragment;
    "NewUser(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveSideContract(bool)": EventFragment;
    "TransferReward(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawUserStake(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddSideContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddTokenToPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizeContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSideContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawUserStake"): EventFragment;
}

export interface AddSideContractEventObject {
  sc_address: string;
}
export type AddSideContractEvent = TypedEvent<
  [string],
  AddSideContractEventObject
>;

export type AddSideContractEventFilter = TypedEventFilter<AddSideContractEvent>;

export interface AddTokenToPoolEventObject {
  user: string;
  amount: BigNumber;
}
export type AddTokenToPoolEvent = TypedEvent<
  [string, BigNumber],
  AddTokenToPoolEventObject
>;

export type AddTokenToPoolEventFilter = TypedEventFilter<AddTokenToPoolEvent>;

export interface FinalizeContractEventObject {
  time: BigNumber;
}
export type FinalizeContractEvent = TypedEvent<
  [BigNumber],
  FinalizeContractEventObject
>;

export type FinalizeContractEventFilter =
  TypedEventFilter<FinalizeContractEvent>;

export interface NewStakeEventObject {
  user_id: BigNumber;
  plan: number;
  dnmAmount: BigNumber;
  uvm_amount: BigNumber;
  land_id: BigNumber;
  stake_id: BigNumber;
}
export type NewStakeEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber],
  NewStakeEventObject
>;

export type NewStakeEventFilter = TypedEventFilter<NewStakeEvent>;

export interface NewUserEventObject {
  user_address: string;
  user_id: BigNumber;
}
export type NewUserEvent = TypedEvent<[string, BigNumber], NewUserEventObject>;

export type NewUserEventFilter = TypedEventFilter<NewUserEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveSideContractEventObject {
  status: boolean;
}
export type RemoveSideContractEvent = TypedEvent<
  [boolean],
  RemoveSideContractEventObject
>;

export type RemoveSideContractEventFilter =
  TypedEventFilter<RemoveSideContractEvent>;

export interface TransferRewardEventObject {
  to: string;
  amount: BigNumber;
}
export type TransferRewardEvent = TypedEvent<
  [string, BigNumber],
  TransferRewardEventObject
>;

export type TransferRewardEventFilter = TypedEventFilter<TransferRewardEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawUserStakeEventObject {
  stake_id: BigNumber;
}
export type WithdrawUserStakeEvent = TypedEvent<
  [BigNumber],
  WithdrawUserStakeEventObject
>;

export type WithdrawUserStakeEventFilter =
  TypedEventFilter<WithdrawUserStakeEvent>;

export interface StakeMeta extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeMetaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTACT_FINALIZED(overrides?: CallOverrides): Promise<[boolean]>;

    DNM_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAND_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    LAUNCH_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    SC_EXISTS(overrides?: CallOverrides): Promise<[boolean]>;

    STAKE_LIST_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOP_UP_PHASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_DNM_STAKED(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_LAND_STAKED(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_UVM_STAKED(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USER_LIST_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    UVM_FEE_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UVM_POOL_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UVM_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addSideContract(
      sc_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addTokenToPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowedDnmAmountStake(
      plan: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateReward(
      plan_type: BigNumberish,
      dnm_amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRewardForStake(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    finalizeContract(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActiveStake(
      overrides?: CallOverrides
    ): Promise<[StakeMeta.StakePlanStructOutput[]]>;

    getAllStake(
      overrides?: CallOverrides
    ): Promise<[StakeMeta.StakePlanStructOutput[]]>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFinishedStake(
      overrides?: CallOverrides
    ): Promise<[StakeMeta.StakePlanStructOutput[]]>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [StakeMeta.StakePlanStructOutput] & {
        sp: StakeMeta.StakePlanStructOutput;
      }
    >;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber]>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[StakeMeta.StakePlanStructOutput[]]>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeSideContract(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeFrom(
      staker: string,
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        userId: BigNumber;
        exists: boolean;
        plan: number;
        uvm: BigNumber;
        dnm: BigNumber;
        land: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        stake_duration: BigNumber;
        total_paid_out: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferRewardFromSideContract(
      amount: BigNumberish,
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTopUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdrawAllowance(
      sp: StakeMeta.StakePlanStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFeeByDao(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CONTACT_FINALIZED(overrides?: CallOverrides): Promise<boolean>;

  DNM_TOKEN(overrides?: CallOverrides): Promise<string>;

  EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  LAND_TOKEN(overrides?: CallOverrides): Promise<string>;

  LAUNCH_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  SC_EXISTS(overrides?: CallOverrides): Promise<boolean>;

  STAKE_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  TOP_UP_PHASE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_DNM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_LAND_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_UVM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  USER_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

  UVM_FEE_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  UVM_POOL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  UVM_TOKEN(overrides?: CallOverrides): Promise<string>;

  addSideContract(
    sc_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addTokenToPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowedDnmAmountStake(
    plan: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calDnmUvmRatio(
    dnm: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateReward(
    plan_type: BigNumberish,
    dnm_amount: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    stake_duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardForStake(
    stake_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  finalizeContract(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActiveStake(
    overrides?: CallOverrides
  ): Promise<StakeMeta.StakePlanStructOutput[]>;

  getAllStake(
    overrides?: CallOverrides
  ): Promise<StakeMeta.StakePlanStructOutput[]>;

  getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getFinishedStake(
    overrides?: CallOverrides
  ): Promise<StakeMeta.StakePlanStructOutput[]>;

  getPlanByTokenId(
    land_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getStake(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StakeMeta.StakePlanStructOutput>;

  getUser(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean, BigNumber]>;

  getUserStake(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<StakeMeta.StakePlanStructOutput[]>;

  getUserStakeIds(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeSideContract(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDao(
    _dao: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    dnmAmount: BigNumberish,
    land_id: BigNumberish,
    stake_duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeFrom(
    staker: string,
    dnmAmount: BigNumberish,
    land_id: BigNumberish,
    stake_duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      userId: BigNumber;
      exists: boolean;
      plan: number;
      uvm: BigNumber;
      dnm: BigNumber;
      land: BigNumber;
      start: BigNumber;
      finish: BigNumber;
      stake_duration: BigNumber;
      total_paid_out: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferRewardFromSideContract(
    amount: BigNumberish,
    user_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTopUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdrawAllowance(
    sp: StakeMeta.StakePlanStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFeeByDao(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawReward(
    stake_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawStake(
    stake_id: BigNumberish,
    withdraw_reward: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTACT_FINALIZED(overrides?: CallOverrides): Promise<boolean>;

    DNM_TOKEN(overrides?: CallOverrides): Promise<string>;

    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    LAND_TOKEN(overrides?: CallOverrides): Promise<string>;

    LAUNCH_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    SC_EXISTS(overrides?: CallOverrides): Promise<boolean>;

    STAKE_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    TOP_UP_PHASE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_DNM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_LAND_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_UVM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    USER_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_FEE_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_POOL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_TOKEN(overrides?: CallOverrides): Promise<string>;

    addSideContract(
      sc_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenToPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedDnmAmountStake(
      plan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateReward(
      plan_type: BigNumberish,
      dnm_amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardForStake(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    finalizeContract(overrides?: CallOverrides): Promise<void>;

    getActiveStake(
      overrides?: CallOverrides
    ): Promise<StakeMeta.StakePlanStructOutput[]>;

    getAllStake(
      overrides?: CallOverrides
    ): Promise<StakeMeta.StakePlanStructOutput[]>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFinishedStake(
      overrides?: CallOverrides
    ): Promise<StakeMeta.StakePlanStructOutput[]>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakeMeta.StakePlanStructOutput>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber]>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<StakeMeta.StakePlanStructOutput[]>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeSideContract(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDao(_dao: string, overrides?: CallOverrides): Promise<void>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFrom(
      staker: string,
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        userId: BigNumber;
        exists: boolean;
        plan: number;
        uvm: BigNumber;
        dnm: BigNumber;
        land: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        stake_duration: BigNumber;
        total_paid_out: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRewardFromSideContract(
      amount: BigNumberish,
      user_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTopUp(overrides?: CallOverrides): Promise<void>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdrawAllowance(
      sp: StakeMeta.StakePlanStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeByDao(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddSideContract(address)"(
      sc_address?: string | null
    ): AddSideContractEventFilter;
    AddSideContract(sc_address?: string | null): AddSideContractEventFilter;

    "AddTokenToPool(address,uint256)"(
      user?: string | null,
      amount?: null
    ): AddTokenToPoolEventFilter;
    AddTokenToPool(
      user?: string | null,
      amount?: null
    ): AddTokenToPoolEventFilter;

    "FinalizeContract(uint256)"(time?: null): FinalizeContractEventFilter;
    FinalizeContract(time?: null): FinalizeContractEventFilter;

    "NewStake(uint256,uint8,uint256,uint256,uint256,uint256)"(
      user_id?: null,
      plan?: null,
      dnmAmount?: null,
      uvm_amount?: null,
      land_id?: null,
      stake_id?: null
    ): NewStakeEventFilter;
    NewStake(
      user_id?: null,
      plan?: null,
      dnmAmount?: null,
      uvm_amount?: null,
      land_id?: null,
      stake_id?: null
    ): NewStakeEventFilter;

    "NewUser(address,uint256)"(
      user_address?: string | null,
      user_id?: null
    ): NewUserEventFilter;
    NewUser(user_address?: string | null, user_id?: null): NewUserEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveSideContract(bool)"(status?: null): RemoveSideContractEventFilter;
    RemoveSideContract(status?: null): RemoveSideContractEventFilter;

    "TransferReward(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TransferRewardEventFilter;
    TransferReward(
      to?: string | null,
      amount?: null
    ): TransferRewardEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;

    "WithdrawUserStake(uint256)"(stake_id?: null): WithdrawUserStakeEventFilter;
    WithdrawUserStake(stake_id?: null): WithdrawUserStakeEventFilter;
  };

  estimateGas: {
    CONTACT_FINALIZED(overrides?: CallOverrides): Promise<BigNumber>;

    DNM_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    LAND_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    LAUNCH_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    SC_EXISTS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    TOP_UP_PHASE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_DNM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_LAND_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_UVM_STAKED(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    USER_LIST_ID(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_FEE_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_POOL_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    UVM_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addSideContract(
      sc_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addTokenToPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowedDnmAmountStake(
      plan: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateReward(
      plan_type: BigNumberish,
      dnm_amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardForStake(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeContract(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStake(overrides?: CallOverrides): Promise<BigNumber>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFinishedStake(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStake(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeSideContract(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeFrom(
      staker: string,
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferRewardFromSideContract(
      amount: BigNumberish,
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTopUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllowance(
      sp: StakeMeta.StakePlanStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeByDao(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTACT_FINALIZED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DNM_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIGHTEEN_MONTH_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LAND_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAUNCH_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_DECAY_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SC_EXISTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_LIST_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOP_UP_PHASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_DNM_STAKED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_LAND_STAKED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_UVM_STAKED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USER_LIST_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UVM_FEE_BALANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UVM_POOL_BALANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UVM_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSideContract(
      sc_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addTokenToPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowedDnmAmountStake(
      plan: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateReward(
      plan_type: BigNumberish,
      dnm_amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardForStake(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeContract(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActiveStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractDNMBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractUVMBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinishedStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSideContract(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDao(
      _dao: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeFrom(
      staker: string,
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferRewardFromSideContract(
      amount: BigNumberish,
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTopUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAllowance(
      sp: StakeMeta.StakePlanStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeeByDao(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
