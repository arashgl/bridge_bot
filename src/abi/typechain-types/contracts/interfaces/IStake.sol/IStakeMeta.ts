/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type StakePlanStruct = {
  userId: BigNumberish;
  exists: boolean;
  plan: BigNumberish;
  uvm: BigNumberish;
  dnm: BigNumberish;
  land: BigNumberish;
  start: BigNumberish;
  finish: BigNumberish;
  stake_duration: BigNumberish;
  total_paid_out: BigNumberish;
};

export type StakePlanStructOutput = [
  BigNumber,
  boolean,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  userId: BigNumber;
  exists: boolean;
  plan: number;
  uvm: BigNumber;
  dnm: BigNumber;
  land: BigNumber;
  start: BigNumber;
  finish: BigNumber;
  stake_duration: BigNumber;
  total_paid_out: BigNumber;
};

export interface IStakeMetaInterface extends utils.Interface {
  functions: {
    "getActiveStake()": FunctionFragment;
    "getAllStake()": FunctionFragment;
    "getContractDNMBalance()": FunctionFragment;
    "getContractUVMBalance()": FunctionFragment;
    "getFinishedStake()": FunctionFragment;
    "getPlanByTokenId(uint256)": FunctionFragment;
    "getStake(uint256)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserStake(address)": FunctionFragment;
    "getUserStakeIds(address)": FunctionFragment;
    "stake(uint256,uint256,uint256)": FunctionFragment;
    "withdrawReward(uint256)": FunctionFragment;
    "withdrawStake(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActiveStake"
      | "getAllStake"
      | "getContractDNMBalance"
      | "getContractUVMBalance"
      | "getFinishedStake"
      | "getPlanByTokenId"
      | "getStake"
      | "getUser"
      | "getUserStake"
      | "getUserStakeIds"
      | "stake"
      | "withdrawReward"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDNMBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractUVMBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinishedStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDNMBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractUVMBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinishedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStakeMeta extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakeMetaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActiveStake(
      overrides?: CallOverrides
    ): Promise<[StakePlanStructOutput[]]>;

    getAllStake(overrides?: CallOverrides): Promise<[StakePlanStructOutput[]]>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFinishedStake(
      overrides?: CallOverrides
    ): Promise<[StakePlanStructOutput[]]>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakePlanStructOutput]>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber]>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[StakePlanStructOutput[]]>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getActiveStake(overrides?: CallOverrides): Promise<StakePlanStructOutput[]>;

  getAllStake(overrides?: CallOverrides): Promise<StakePlanStructOutput[]>;

  getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getFinishedStake(overrides?: CallOverrides): Promise<StakePlanStructOutput[]>;

  getPlanByTokenId(
    land_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getStake(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StakePlanStructOutput>;

  getUser(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean, BigNumber]>;

  getUserStake(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<StakePlanStructOutput[]>;

  getUserStakeIds(
    user_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stake(
    dnmAmount: BigNumberish,
    land_id: BigNumberish,
    stake_duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawReward(
    stake_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawStake(
    stake_id: BigNumberish,
    withdraw_reward: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getActiveStake(overrides?: CallOverrides): Promise<StakePlanStructOutput[]>;

    getAllStake(overrides?: CallOverrides): Promise<StakePlanStructOutput[]>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFinishedStake(
      overrides?: CallOverrides
    ): Promise<StakePlanStructOutput[]>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePlanStructOutput>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber]>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<StakePlanStructOutput[]>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStake(overrides?: CallOverrides): Promise<BigNumber>;

    getContractDNMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractUVMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFinishedStake(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStake(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActiveStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractDNMBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractUVMBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinishedStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeIds(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      dnmAmount: BigNumberish,
      land_id: BigNumberish,
      stake_duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      stake_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      stake_id: BigNumberish,
      withdraw_reward: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
