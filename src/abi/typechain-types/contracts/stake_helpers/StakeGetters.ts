/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface StakeGettersInterface extends utils.Interface {
  functions: {
    "EIGHTEEN_MONTH_DURATION()": FunctionFragment;
    "ONE_YEAR_DURATION()": FunctionFragment;
    "REWARD_DECAY_PERIOD()": FunctionFragment;
    "STAKE_MAX_DNM()": FunctionFragment;
    "STAKE_MAX_UVM()": FunctionFragment;
    "STAKE_MIN_DNM()": FunctionFragment;
    "TIME_STEP()": FunctionFragment;
    "TWO_YEAR_DURATION()": FunctionFragment;
    "calDnmUvmRatio(uint256)": FunctionFragment;
    "getPlanByTokenId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIGHTEEN_MONTH_DURATION"
      | "ONE_YEAR_DURATION"
      | "REWARD_DECAY_PERIOD"
      | "STAKE_MAX_DNM"
      | "STAKE_MAX_UVM"
      | "STAKE_MIN_DNM"
      | "TIME_STEP"
      | "TWO_YEAR_DURATION"
      | "calDnmUvmRatio"
      | "getPlanByTokenId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIGHTEEN_MONTH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_DECAY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MAX_DNM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MAX_UVM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_MIN_DNM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TWO_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calDnmUvmRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanByTokenId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIGHTEEN_MONTH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_DECAY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MAX_DNM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MAX_UVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_MIN_DNM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TWO_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calDnmUvmRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanByTokenId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StakeGetters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeGettersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  calDnmUvmRatio(
    dnm: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlanByTokenId(
    land_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    EIGHTEEN_MONTH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIGHTEEN_MONTH_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_DECAY_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAKE_MAX_DNM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_MAX_UVM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_MIN_DNM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calDnmUvmRatio(
      dnm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanByTokenId(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
