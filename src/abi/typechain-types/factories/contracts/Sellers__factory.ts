/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Sellers, SellersInterface } from "../../contracts/Sellers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromId",
        type: "uint256",
      },
    ],
    name: "InvalidFromID",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toId",
        type: "uint256",
      },
    ],
    name: "InvalidRangeID",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "toId",
        type: "uint256",
      },
    ],
    name: "InvalidToID",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seller_id",
        type: "uint256",
      },
    ],
    name: "SellerNotFound",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller_addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "added_volume",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "current_bv",
        type: "uint256",
      },
    ],
    name: "AddedSaleVolume",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "seller_addr",
        type: "address",
      },
    ],
    name: "CreatedSeller",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "SellerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SellerList",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "seller_addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bv_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token_withdraw_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dnm_withdraw",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_seller_id",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "ignore_vaildation",
        type: "bool",
      },
    ],
    name: "getSeller",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "seller_addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bv_value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token_withdraw_value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dnm_withdraw",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
        ],
        internalType: "struct Sellers.Seller",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toId",
        type: "uint256",
      },
    ],
    name: "getSellerList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "seller_addr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bv_value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token_withdraw_value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dnm_withdraw",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
        ],
        internalType: "struct Sellers.Seller[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seller_id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061062a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634d343cb21461005c57806358db9768146100a25780637b436480146100c25780637df6cc6f146100d9578063b67ea63714610161575b600080fd5b61008561006a366004610435565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b56100b036600461044e565b610181565b60405161009991906104b2565b6100cb60005481565b604051908152602001610099565b61012a6100e7366004610500565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0390931693919290919060ff1686565b604080519687526001600160a01b0390951660208701529385019290925260608401526080830152151560a082015260c001610099565b61017461016f366004610530565b61033a565b6040516100999190610565565b6060828260018210156101af57604051633a2bd95560e11b8152600481018390526024015b60405180910390fd5b8082106101d95760405163d427f71f60e01b815260048101829052602481018390526044016101a6565b6000548411156101ff57604051633322840360e11b8152600481018590526024016101a6565b600061020b8686610589565b67ffffffffffffffff8111156102235761022361059c565b60405190808252806020026020018201604052801561025c57816020015b6102496103f4565b8152602001906001900390816102415790505b50905060005b61026c8787610589565b811015610330576000600281610282848b6105b2565b815260208082019290925260409081016000908120546001600160a01b03908116808352600180865292849020845160c081018652815481529381015490921694830194909452600281015492820192909252600382015460608201526004820154608082015260059091015460ff16151560a0820152845191925090849084908110610311576103116105c5565b6020026020010181905250508080610328906105db565b915050610262565b5095945050505050565b6103426103f4565b6000838152600260205260409020546001600160a01b031680158015610366575082155b1561038757604051631bf4938960e11b8152600481018590526024016101a6565b6001600160a01b03908116600090815260016020818152604092839020835160c081018552815481529281015490941690820152600283015491810191909152600382015460608201526004820154608082015260059091015460ff16151560a082015290505b92915050565b6040518060c001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b60006020828403121561044757600080fd5b5035919050565b6000806040838503121561046157600080fd5b50508035926020909101359150565b805182526020808201516001600160a01b03169083015260408082015190830152606080820151908301526080808201519083015260a0908101511515910152565b6020808252825182820181905260009190848201906040850190845b818110156104f4576104e1838551610470565b9284019260c092909201916001016104ce565b50909695505050505050565b60006020828403121561051257600080fd5b81356001600160a01b038116811461052957600080fd5b9392505050565b6000806040838503121561054357600080fd5b823591506020830135801515811461055a57600080fd5b809150509250929050565b60c081016103ee8284610470565b634e487b7160e01b600052601160045260246000fd5b818103818111156103ee576103ee610573565b634e487b7160e01b600052604160045260246000fd5b808201808211156103ee576103ee610573565b634e487b7160e01b600052603260045260246000fd5b6000600182016105ed576105ed610573565b506001019056fea26469706673582212207c8611bed7b65aa34f22a32f1e16ff09c97f80b0be18242a9e2e5852532813d664736f6c63430008140033";

type SellersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SellersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sellers__factory extends ContractFactory {
  constructor(...args: SellersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Sellers> {
    return super.deploy(overrides || {}) as Promise<Sellers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Sellers {
    return super.attach(address) as Sellers;
  }
  override connect(signer: Signer): Sellers__factory {
    return super.connect(signer) as Sellers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SellersInterface {
    return new utils.Interface(_abi) as SellersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Sellers {
    return new Contract(address, _abi, signerOrProvider) as Sellers;
  }
}
