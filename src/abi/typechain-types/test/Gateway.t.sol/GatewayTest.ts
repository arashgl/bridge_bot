/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace UsersStruct {
  export type BusinessValueStruct = {
    left: BigNumberish;
    right: BigNumberish;
    dir: BigNumberish;
    level: BigNumberish;
    summ: BigNumberish;
  };

  export type BusinessValueStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    left: BigNumber;
    right: BigNumber;
    dir: BigNumber;
    level: BigNumber;
    summ: BigNumber;
  };

  export type LastOrderStruct = {
    date: BigNumberish;
    order_id: BigNumberish;
    bv_level: BigNumberish;
  };

  export type LastOrderStructOutput = [BigNumber, BigNumber, BigNumber] & {
    date: BigNumber;
    order_id: BigNumber;
    bv_level: BigNumber;
  };

  export type UserStruct = {
    id: BigNumberish;
    bv: UsersStruct.BusinessValueStruct;
    last_order: UsersStruct.LastOrderStruct;
    depth: BigNumberish;
    pending_withdraw: BigNumberish;
    levelup_count: BigNumberish;
    lastweek: BigNumberish;
    step: BigNumberish;
    pending_voucher: BigNumberish;
    exists: boolean;
    data: BytesLike;
  };

  export type UserStructOutput = [
    BigNumber,
    UsersStruct.BusinessValueStructOutput,
    UsersStruct.LastOrderStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    id: BigNumber;
    bv: UsersStruct.BusinessValueStructOutput;
    last_order: UsersStruct.LastOrderStructOutput;
    depth: BigNumber;
    pending_withdraw: BigNumber;
    levelup_count: BigNumber;
    lastweek: BigNumber;
    step: BigNumber;
    pending_voucher: BigNumber;
    exists: boolean;
    data: string;
  };
}

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };
}

export interface GatewayTestInterface extends utils.Interface {
  functions: {
    "BVPlan(uint256)": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "ListLevelUpDate(uint256)": FunctionFragment;
    "Token1()": FunctionFragment;
    "Token2()": FunctionFragment;
    "USDT()": FunctionFragment;
    "UVM()": FunctionFragment;
    "UserAddress(uint256)": FunctionFragment;
    "UserLevelUpDateIndex(uint256,uint256)": FunctionFragment;
    "UserList(address)": FunctionFragment;
    "UsersPaths(uint256,uint256)": FunctionFragment;
    "UsersPathsHash(uint256,uint256)": FunctionFragment;
    "buy_product(address,uint256,uint256,address,uint256,bytes32,uint256)": FunctionFragment;
    "buy_product_from(address,address,address,uint256,uint256,address,uint256,bytes32,uint256)": FunctionFragment;
    "calculator()": FunctionFragment;
    "callback()": FunctionFragment;
    "changeFeeWallet(address)": FunctionFragment;
    "check_buy_product(address,address,uint256,uint256,uint256,uint256,uint256,bytes32)": FunctionFragment;
    "check_calculate(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "check_is_child_of_parent(address,address,bool,uint8)": FunctionFragment;
    "check_level_up(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "check_user_data(uint256,address,uint256,uint256)": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "feeWallet()": FunctionFragment;
    "gateway()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "isDev()": FunctionFragment;
    "level_up_data_index()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUp()": FunctionFragment;
    "switchToProduction()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_calculator_test()": FunctionFragment;
    "test_complete_test()": FunctionFragment;
    "test_default_data()": FunctionFragment;
    "test_paymentFrom()": FunctionFragment;
    "test_simple_test()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "user_id()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BVPlan"
      | "IS_TEST"
      | "ListLevelUpDate"
      | "Token1"
      | "Token2"
      | "USDT"
      | "UVM"
      | "UserAddress"
      | "UserLevelUpDateIndex"
      | "UserList"
      | "UsersPaths"
      | "UsersPathsHash"
      | "buy_product"
      | "buy_product_from"
      | "calculator"
      | "callback"
      | "changeFeeWallet"
      | "check_buy_product"
      | "check_calculate"
      | "check_is_child_of_parent"
      | "check_level_up"
      | "check_user_data"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "feeWallet"
      | "gateway"
      | "getUser"
      | "isDev"
      | "level_up_data_index"
      | "owner"
      | "renounceOwnership"
      | "setUp"
      | "switchToProduction"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_calculator_test"
      | "test_complete_test"
      | "test_default_data"
      | "test_paymentFrom"
      | "test_simple_test"
      | "transferOwnership"
      | "user_id"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BVPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ListLevelUpDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "Token2", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(functionFragment: "UVM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UserAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UserLevelUpDateIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "UserList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "UsersPaths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UsersPathsHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy_product",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy_product_from",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "callback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "check_buy_product",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "check_calculate",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "check_is_child_of_parent",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check_level_up",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check_user_data",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(functionFragment: "isDev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "level_up_data_index",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchToProduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_calculator_test",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_complete_test",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_default_data",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_paymentFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_simple_test",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "user_id", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BVPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ListLevelUpDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Token2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UVM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserLevelUpDateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UserList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UsersPaths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UsersPathsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buy_product",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buy_product_from",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_buy_product",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_calculate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_is_child_of_parent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_level_up",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check_user_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "level_up_data_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchToProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_calculator_test",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_complete_test",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_default_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_paymentFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_simple_test",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_id", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface GatewayTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GatewayTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    Token1(overrides?: CallOverrides): Promise<[string]>;

    Token2(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    UVM(overrides?: CallOverrides): Promise<[string]>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buy_product(
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buy_product_from(
      caller: string,
      _payer: string,
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    callback(overrides?: CallOverrides): Promise<[string]>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_buy_product(
      buyer_address: string,
      seller_addr: string,
      _order_id: BigNumberish,
      _bv_value: BigNumberish,
      _sv_value: BigNumberish,
      _seller_token: BigNumberish,
      _date: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_calculate(
      usr_addr: string,
      _bvl: BigNumberish,
      _bvr: BigNumberish,
      _order_id: BigNumberish,
      _pending_withdraw: BigNumberish,
      _lastweek: BigNumberish,
      _step: BigNumberish,
      _pending_voucher: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_is_child_of_parent(
      parent_addr: string,
      child_addr: string,
      _status: boolean,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_level_up(
      usr_addr: string,
      _date: BigNumberish,
      _level: BigNumberish,
      _levelup_count: BigNumberish,
      last_user_levelup_index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_user_data(
      user_id: BigNumberish,
      usr_addr: string,
      _dir: BigNumberish,
      _depth: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    feeWallet(overrides?: CallOverrides): Promise<[string]>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDev(overrides?: CallOverrides): Promise<[boolean]>;

    level_up_data_index(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    test_calculator_test(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_complete_test(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_default_data(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_paymentFrom(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_simple_test(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    user_id(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  ListLevelUpDate(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

  Token1(overrides?: CallOverrides): Promise<string>;

  Token2(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  UVM(overrides?: CallOverrides): Promise<string>;

  UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  UserLevelUpDateIndex(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  UserList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      UsersStruct.BusinessValueStructOutput,
      UsersStruct.LastOrderStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      id: BigNumber;
      bv: UsersStruct.BusinessValueStructOutput;
      last_order: UsersStruct.LastOrderStructOutput;
      depth: BigNumber;
      pending_withdraw: BigNumber;
      levelup_count: BigNumber;
      lastweek: BigNumber;
      step: BigNumber;
      pending_voucher: BigNumber;
      exists: boolean;
      data: string;
    }
  >;

  UsersPaths(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  UsersPathsHash(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  buy_product(
    buyer: string,
    bv_value: BigNumberish,
    s_value: BigNumberish,
    seller_addr: string,
    token_type: BigNumberish,
    data: BytesLike,
    parent_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buy_product_from(
    caller: string,
    _payer: string,
    buyer: string,
    bv_value: BigNumberish,
    s_value: BigNumberish,
    seller_addr: string,
    token_type: BigNumberish,
    data: BytesLike,
    parent_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculator(overrides?: CallOverrides): Promise<string>;

  callback(overrides?: CallOverrides): Promise<string>;

  changeFeeWallet(
    wallet_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_buy_product(
    buyer_address: string,
    seller_addr: string,
    _order_id: BigNumberish,
    _bv_value: BigNumberish,
    _sv_value: BigNumberish,
    _seller_token: BigNumberish,
    _date: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_calculate(
    usr_addr: string,
    _bvl: BigNumberish,
    _bvr: BigNumberish,
    _order_id: BigNumberish,
    _pending_withdraw: BigNumberish,
    _lastweek: BigNumberish,
    _step: BigNumberish,
    _pending_voucher: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_is_child_of_parent(
    parent_addr: string,
    child_addr: string,
    _status: boolean,
    _side: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_level_up(
    usr_addr: string,
    _date: BigNumberish,
    _level: BigNumberish,
    _levelup_count: BigNumberish,
    last_user_levelup_index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_user_data(
    user_id: BigNumberish,
    usr_addr: string,
    _dir: BigNumberish,
    _depth: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  feeWallet(overrides?: CallOverrides): Promise<string>;

  gateway(overrides?: CallOverrides): Promise<string>;

  getUser(
    user_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDev(overrides?: CallOverrides): Promise<boolean>;

  level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  switchToProduction(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  test_calculator_test(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_complete_test(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_default_data(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_paymentFrom(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_simple_test(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  user_id(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    Token1(overrides?: CallOverrides): Promise<string>;

    Token2(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    UVM(overrides?: CallOverrides): Promise<string>;

    UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    buy_product(
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buy_product_from(
      caller: string,
      _payer: string,
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculator(overrides?: CallOverrides): Promise<string>;

    callback(overrides?: CallOverrides): Promise<string>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    check_buy_product(
      buyer_address: string,
      seller_addr: string,
      _order_id: BigNumberish,
      _bv_value: BigNumberish,
      _sv_value: BigNumberish,
      _seller_token: BigNumberish,
      _date: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    check_calculate(
      usr_addr: string,
      _bvl: BigNumberish,
      _bvr: BigNumberish,
      _order_id: BigNumberish,
      _pending_withdraw: BigNumberish,
      _lastweek: BigNumberish,
      _step: BigNumberish,
      _pending_voucher: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    check_is_child_of_parent(
      parent_addr: string,
      child_addr: string,
      _status: boolean,
      _side: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    check_level_up(
      usr_addr: string,
      _date: BigNumberish,
      _level: BigNumberish,
      _levelup_count: BigNumberish,
      last_user_levelup_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    check_user_data(
      user_id: BigNumberish,
      usr_addr: string,
      _dir: BigNumberish,
      _depth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    feeWallet(overrides?: CallOverrides): Promise<string>;

    gateway(overrides?: CallOverrides): Promise<string>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<UsersStruct.UserStructOutput>;

    isDev(overrides?: CallOverrides): Promise<boolean>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    switchToProduction(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    test_calculator_test(overrides?: CallOverrides): Promise<void>;

    test_complete_test(overrides?: CallOverrides): Promise<void>;

    test_default_data(overrides?: CallOverrides): Promise<void>;

    test_paymentFrom(overrides?: CallOverrides): Promise<void>;

    test_simple_test(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Token1(overrides?: CallOverrides): Promise<BigNumber>;

    Token2(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    UVM(overrides?: CallOverrides): Promise<BigNumber>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy_product(
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buy_product_from(
      caller: string,
      _payer: string,
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    callback(overrides?: CallOverrides): Promise<BigNumber>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_buy_product(
      buyer_address: string,
      seller_addr: string,
      _order_id: BigNumberish,
      _bv_value: BigNumberish,
      _sv_value: BigNumberish,
      _seller_token: BigNumberish,
      _date: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_calculate(
      usr_addr: string,
      _bvl: BigNumberish,
      _bvr: BigNumberish,
      _order_id: BigNumberish,
      _pending_withdraw: BigNumberish,
      _lastweek: BigNumberish,
      _step: BigNumberish,
      _pending_voucher: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_is_child_of_parent(
      parent_addr: string,
      child_addr: string,
      _status: boolean,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_level_up(
      usr_addr: string,
      _date: BigNumberish,
      _level: BigNumberish,
      _levelup_count: BigNumberish,
      last_user_levelup_index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_user_data(
      user_id: BigNumberish,
      usr_addr: string,
      _dir: BigNumberish,
      _depth: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDev(overrides?: CallOverrides): Promise<BigNumber>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    test_calculator_test(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_complete_test(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_default_data(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_paymentFrom(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_simple_test(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BVPlan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UVM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy_product(
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buy_product_from(
      caller: string,
      _payer: string,
      buyer: string,
      bv_value: BigNumberish,
      s_value: BigNumberish,
      seller_addr: string,
      token_type: BigNumberish,
      data: BytesLike,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_buy_product(
      buyer_address: string,
      seller_addr: string,
      _order_id: BigNumberish,
      _bv_value: BigNumberish,
      _sv_value: BigNumberish,
      _seller_token: BigNumberish,
      _date: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_calculate(
      usr_addr: string,
      _bvl: BigNumberish,
      _bvr: BigNumberish,
      _order_id: BigNumberish,
      _pending_withdraw: BigNumberish,
      _lastweek: BigNumberish,
      _step: BigNumberish,
      _pending_voucher: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_is_child_of_parent(
      parent_addr: string,
      child_addr: string,
      _status: boolean,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_level_up(
      usr_addr: string,
      _date: BigNumberish,
      _level: BigNumberish,
      _levelup_count: BigNumberish,
      last_user_levelup_index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_user_data(
      user_id: BigNumberish,
      usr_addr: string,
      _dir: BigNumberish,
      _depth: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    level_up_data_index(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_calculator_test(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_complete_test(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_default_data(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_paymentFrom(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_simple_test(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    user_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
