/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMarketplaceError,
  IMarketplaceErrorInterface,
} from "../../../../contracts/market/errors/IMarketplaceError";

const _abi = [
  {
    inputs: [],
    name: "ForbiddenMinter",
    type: "error",
  },
  {
    inputs: [],
    name: "GatewayFail",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOfferSeller",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "actualSigner",
        type: "address",
      },
    ],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "SoldOut",
    type: "error",
  },
] as const;

export class IMarketplaceError__factory {
  static readonly abi = _abi;
  static createInterface(): IMarketplaceErrorInterface {
    return new utils.Interface(_abi) as IMarketplaceErrorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMarketplaceError {
    return new Contract(address, _abi, signerOrProvider) as IMarketplaceError;
  }
}
