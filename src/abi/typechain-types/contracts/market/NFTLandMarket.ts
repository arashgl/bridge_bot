/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface NFTLandMarketInterface extends utils.Interface {
  functions: {
    "GATEWAY()": FunctionFragment;
    "MAX_ID()": FunctionFragment;
    "NFTLAND()": FunctionFragment;
    "SELLER()": FunctionFragment;
    "TOKEN()": FunctionFragment;
    "changeMaxId(uint256)": FunctionFragment;
    "getMintPrice(uint256)": FunctionFragment;
    "mint(uint256[],address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GATEWAY"
      | "MAX_ID"
      | "NFTLAND"
      | "SELLER"
      | "TOKEN"
      | "changeMaxId"
      | "getMintPrice"
      | "mint"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GATEWAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "NFTLAND", values?: undefined): string;
  encodeFunctionData(functionFragment: "SELLER", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeMaxId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "GATEWAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NFTLAND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SELLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTLandMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTLandMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GATEWAY(overrides?: CallOverrides): Promise<[string]>;

    MAX_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    NFTLAND(overrides?: CallOverrides): Promise<[string]>;

    SELLER(overrides?: CallOverrides): Promise<[string]>;

    TOKEN(overrides?: CallOverrides): Promise<[string]>;

    changeMaxId(
      max_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMintPrice(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bv: BigNumber; sv: BigNumber }>;

    mint(
      _tokenIds: BigNumberish[],
      parent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  GATEWAY(overrides?: CallOverrides): Promise<string>;

  MAX_ID(overrides?: CallOverrides): Promise<BigNumber>;

  NFTLAND(overrides?: CallOverrides): Promise<string>;

  SELLER(overrides?: CallOverrides): Promise<string>;

  TOKEN(overrides?: CallOverrides): Promise<string>;

  changeMaxId(
    max_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMintPrice(
    land_id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { bv: BigNumber; sv: BigNumber }>;

  mint(
    _tokenIds: BigNumberish[],
    parent: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    GATEWAY(overrides?: CallOverrides): Promise<string>;

    MAX_ID(overrides?: CallOverrides): Promise<BigNumber>;

    NFTLAND(overrides?: CallOverrides): Promise<string>;

    SELLER(overrides?: CallOverrides): Promise<string>;

    TOKEN(overrides?: CallOverrides): Promise<string>;

    changeMaxId(max_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getMintPrice(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bv: BigNumber; sv: BigNumber }>;

    mint(
      _tokenIds: BigNumberish[],
      parent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    GATEWAY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ID(overrides?: CallOverrides): Promise<BigNumber>;

    NFTLAND(overrides?: CallOverrides): Promise<BigNumber>;

    SELLER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    changeMaxId(
      max_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMintPrice(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _tokenIds: BigNumberish[],
      parent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GATEWAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTLAND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SELLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMaxId(
      max_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMintPrice(
      land_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _tokenIds: BigNumberish[],
      parent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
