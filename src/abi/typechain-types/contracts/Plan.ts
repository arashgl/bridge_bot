/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PlanInterface extends utils.Interface {
  functions: {
    "UserList(address)": FunctionFragment;
    "_id()": FunctionFragment;
    "addUser(address,string,address)": FunctionFragment;
    "buyProduct(address,uint256)": FunctionFragment;
    "getNextCalTime(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UserList"
      | "_id"
      | "addUser"
      | "buyProduct"
      | "getNextCalTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "UserList", values: [string]): string;
  encodeFunctionData(functionFragment: "_id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextCalTime",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "UserList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextCalTime",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Plan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, boolean, BigNumber] & {
        id: BigNumber;
        name: string;
        parent: string;
        left: string;
        right: string;
        exists: boolean;
        buycount: BigNumber;
      }
    >;

    _id(overrides?: CallOverrides): Promise<[BigNumber]>;

    addUser(
      user_address: string,
      name: string,
      parent_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyProduct(
      user_address: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getNextCalTime(
      currentTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  UserList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, boolean, BigNumber] & {
      id: BigNumber;
      name: string;
      parent: string;
      left: string;
      right: string;
      exists: boolean;
      buycount: BigNumber;
    }
  >;

  _id(overrides?: CallOverrides): Promise<BigNumber>;

  addUser(
    user_address: string,
    name: string,
    parent_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyProduct(
    user_address: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getNextCalTime(
    currentTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, boolean, BigNumber] & {
        id: BigNumber;
        name: string;
        parent: string;
        left: string;
        right: string;
        exists: boolean;
        buycount: BigNumber;
      }
    >;

    _id(overrides?: CallOverrides): Promise<BigNumber>;

    addUser(
      user_address: string,
      name: string,
      parent_address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyProduct(
      user_address: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextCalTime(
      currentTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    UserList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _id(overrides?: CallOverrides): Promise<BigNumber>;

    addUser(
      user_address: string,
      name: string,
      parent_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyProduct(
      user_address: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getNextCalTime(
      currentTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addUser(
      user_address: string,
      name: string,
      parent_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyProduct(
      user_address: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getNextCalTime(
      currentTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
