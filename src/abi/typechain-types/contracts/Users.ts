/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace UsersStruct {
  export type BusinessValueStruct = {
    left: BigNumberish;
    right: BigNumberish;
    dir: BigNumberish;
    level: BigNumberish;
    summ: BigNumberish;
  };

  export type BusinessValueStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    left: BigNumber;
    right: BigNumber;
    dir: BigNumber;
    level: BigNumber;
    summ: BigNumber;
  };

  export type LastOrderStruct = {
    date: BigNumberish;
    order_id: BigNumberish;
    bv_level: BigNumberish;
  };

  export type LastOrderStructOutput = [BigNumber, BigNumber, BigNumber] & {
    date: BigNumber;
    order_id: BigNumber;
    bv_level: BigNumber;
  };

  export type ImportUserStruct = {
    userAddr: string;
    parent_addr: string;
    bvlevel: BigNumberish;
    bvsum: BigNumberish;
    levelup_date: BigNumberish;
  };

  export type ImportUserStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    userAddr: string;
    parent_addr: string;
    bvlevel: BigNumber;
    bvsum: BigNumber;
    levelup_date: BigNumber;
  };

  export type UserStruct = {
    id: BigNumberish;
    bv: UsersStruct.BusinessValueStruct;
    last_order: UsersStruct.LastOrderStruct;
    depth: BigNumberish;
    pending_withdraw: BigNumberish;
    levelup_count: BigNumberish;
    lastweek: BigNumberish;
    step: BigNumberish;
    pending_voucher: BigNumberish;
    exists: boolean;
    data: BytesLike;
  };

  export type UserStructOutput = [
    BigNumber,
    UsersStruct.BusinessValueStructOutput,
    UsersStruct.LastOrderStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    id: BigNumber;
    bv: UsersStruct.BusinessValueStructOutput;
    last_order: UsersStruct.LastOrderStructOutput;
    depth: BigNumber;
    pending_withdraw: BigNumber;
    levelup_count: BigNumber;
    lastweek: BigNumber;
    step: BigNumber;
    pending_voucher: BigNumber;
    exists: boolean;
    data: string;
  };
}

export interface UsersInterface extends utils.Interface {
  functions: {
    "BVPlan(uint256)": FunctionFragment;
    "ListLevelUpDate(uint256)": FunctionFragment;
    "UserAddress(uint256)": FunctionFragment;
    "UserLevelUpDateIndex(uint256,uint256)": FunctionFragment;
    "UserList(address)": FunctionFragment;
    "UsersPaths(uint256,uint256)": FunctionFragment;
    "UsersPathsHash(uint256,uint256)": FunctionFragment;
    "addUserBulk((address,address,uint256,uint256,uint256)[])": FunctionFragment;
    "calculator()": FunctionFragment;
    "floor(uint256,uint256)": FunctionFragment;
    "getBit(bytes1,uint8)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "isChildOfParent((uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,bool,bytes32),(uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,bool,bytes32))": FunctionFragment;
    "isDev()": FunctionFragment;
    "level_up_data_index()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "switchToProduction()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "user_id()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BVPlan"
      | "ListLevelUpDate"
      | "UserAddress"
      | "UserLevelUpDateIndex"
      | "UserList"
      | "UsersPaths"
      | "UsersPathsHash"
      | "addUserBulk"
      | "calculator"
      | "floor"
      | "getBit"
      | "getUser"
      | "isChildOfParent"
      | "isDev"
      | "level_up_data_index"
      | "owner"
      | "renounceOwnership"
      | "switchToProduction"
      | "transferOwnership"
      | "user_id"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BVPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ListLevelUpDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UserAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UserLevelUpDateIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "UserList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "UsersPaths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UsersPathsHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUserBulk",
    values: [UsersStruct.ImportUserStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isChildOfParent",
    values: [UsersStruct.UserStruct, UsersStruct.UserStruct]
  ): string;
  encodeFunctionData(functionFragment: "isDev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "level_up_data_index",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "user_id", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BVPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ListLevelUpDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserLevelUpDateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UserList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UsersPaths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UsersPathsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChildOfParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "level_up_data_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_id", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Users extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDev(overrides?: CallOverrides): Promise<[boolean]>;

    level_up_data_index(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    user_id(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ListLevelUpDate(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

  UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  UserLevelUpDateIndex(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  UserList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      UsersStruct.BusinessValueStructOutput,
      UsersStruct.LastOrderStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      id: BigNumber;
      bv: UsersStruct.BusinessValueStructOutput;
      last_order: UsersStruct.LastOrderStructOutput;
      depth: BigNumber;
      pending_withdraw: BigNumber;
      levelup_count: BigNumber;
      lastweek: BigNumber;
      step: BigNumber;
      pending_voucher: BigNumber;
      exists: boolean;
      data: string;
    }
  >;

  UsersPaths(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  UsersPathsHash(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addUserBulk(
    users: UsersStruct.ImportUserStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculator(overrides?: CallOverrides): Promise<string>;

  floor(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBit(
    b: BytesLike,
    position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getUser(
    user_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isChildOfParent(
    parent: UsersStruct.UserStruct,
    child: UsersStruct.UserStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDev(overrides?: CallOverrides): Promise<boolean>;

  level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  switchToProduction(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  user_id(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculator(overrides?: CallOverrides): Promise<string>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<UsersStruct.UserStructOutput>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    isDev(overrides?: CallOverrides): Promise<boolean>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    switchToProduction(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDev(overrides?: CallOverrides): Promise<BigNumber>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BVPlan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    level_up_data_index(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    user_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
