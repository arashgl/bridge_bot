/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace UsersStruct {
  export type BusinessValueStruct = {
    left: BigNumberish;
    right: BigNumberish;
    dir: BigNumberish;
    level: BigNumberish;
    summ: BigNumberish;
  };

  export type BusinessValueStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    left: BigNumber;
    right: BigNumber;
    dir: BigNumber;
    level: BigNumber;
    summ: BigNumber;
  };

  export type LastOrderStruct = {
    date: BigNumberish;
    order_id: BigNumberish;
    bv_level: BigNumberish;
  };

  export type LastOrderStructOutput = [BigNumber, BigNumber, BigNumber] & {
    date: BigNumber;
    order_id: BigNumber;
    bv_level: BigNumber;
  };

  export type ImportUserStruct = {
    userAddr: string;
    parent_addr: string;
    bvlevel: BigNumberish;
    bvsum: BigNumberish;
    levelup_date: BigNumberish;
  };

  export type ImportUserStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    userAddr: string;
    parent_addr: string;
    bvlevel: BigNumber;
    bvsum: BigNumber;
    levelup_date: BigNumber;
  };

  export type UserStruct = {
    id: BigNumberish;
    bv: UsersStruct.BusinessValueStruct;
    last_order: UsersStruct.LastOrderStruct;
    depth: BigNumberish;
    pending_withdraw: BigNumberish;
    levelup_count: BigNumberish;
    lastweek: BigNumberish;
    step: BigNumberish;
    pending_voucher: BigNumberish;
    exists: boolean;
    data: BytesLike;
  };

  export type UserStructOutput = [
    BigNumber,
    UsersStruct.BusinessValueStructOutput,
    UsersStruct.LastOrderStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    id: BigNumber;
    bv: UsersStruct.BusinessValueStructOutput;
    last_order: UsersStruct.LastOrderStructOutput;
    depth: BigNumber;
    pending_withdraw: BigNumber;
    levelup_count: BigNumber;
    lastweek: BigNumber;
    step: BigNumber;
    pending_voucher: BigNumber;
    exists: boolean;
    data: string;
  };
}

export declare namespace OrdersStruct {
  export type OrderStruct = {
    id: BigNumberish;
    user_id: BigNumberish;
    seller_id: BigNumberish;
    bv_value: BigNumberish;
    sv_value: BigNumberish;
    seller_token: BigNumberish;
    date: BigNumberish;
    data: BytesLike;
    exists: boolean;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    id: BigNumber;
    user_id: BigNumber;
    seller_id: BigNumber;
    bv_value: BigNumber;
    sv_value: BigNumber;
    seller_token: BigNumber;
    date: BigNumber;
    data: string;
    exists: boolean;
  };
}

export declare namespace Payments {
  export type PaymentDataStruct = {
    bv_value: BigNumberish;
    sv_value: BigNumberish;
    seller_token: BigNumberish;
    seller_address: string;
    data: BytesLike;
  };

  export type PaymentDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    bv_value: BigNumber;
    sv_value: BigNumber;
    seller_token: BigNumber;
    seller_address: string;
    data: string;
  };
}

export interface GatewayInterface extends utils.Interface {
  functions: {
    "BVPlan(uint256)": FunctionFragment;
    "ListLevelUpDate(uint256)": FunctionFragment;
    "OrderList(uint256)": FunctionFragment;
    "SellerAddress(uint256)": FunctionFragment;
    "SellerList(address)": FunctionFragment;
    "Token1()": FunctionFragment;
    "Token2()": FunctionFragment;
    "UserAddress(uint256)": FunctionFragment;
    "UserLevelUpDateIndex(uint256,uint256)": FunctionFragment;
    "UserList(address)": FunctionFragment;
    "UsersPaths(uint256,uint256)": FunctionFragment;
    "UsersPathsHash(uint256,uint256)": FunctionFragment;
    "addUserBulk((address,address,uint256,uint256,uint256)[])": FunctionFragment;
    "calculate(uint256[])": FunctionFragment;
    "calculateWeek()": FunctionFragment;
    "calculator()": FunctionFragment;
    "changeFeeWallet(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "feeWallet()": FunctionFragment;
    "floor(uint256,uint256)": FunctionFragment;
    "getBit(bytes1,uint8)": FunctionFragment;
    "getOrderList(uint256)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "isChildOfParent((uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,bool,bytes32),(uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,uint256,bool,bytes32))": FunctionFragment;
    "isDev()": FunctionFragment;
    "last_withdrawal_time()": FunctionFragment;
    "level_up_data_index()": FunctionFragment;
    "order_id()": FunctionFragment;
    "owner()": FunctionFragment;
    "payment((uint256,uint256,uint256,address,bytes32),address,address)": FunctionFragment;
    "payment((uint256,uint256,uint256,address,bytes32),uint256,address)": FunctionFragment;
    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)": FunctionFragment;
    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeAllowance(address)": FunctionFragment;
    "seller_id()": FunctionFragment;
    "setAllowance(address,uint256)": FunctionFragment;
    "setCalculator(address)": FunctionFragment;
    "switchToProduction()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "user_id()": FunctionFragment;
    "withdrawToken1Balance()": FunctionFragment;
    "withdrawToken2Balance()": FunctionFragment;
    "withdrawWithDao(uint256,address)": FunctionFragment;
    "withraw_token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BVPlan"
      | "ListLevelUpDate"
      | "OrderList"
      | "SellerAddress"
      | "SellerList"
      | "Token1"
      | "Token2"
      | "UserAddress"
      | "UserLevelUpDateIndex"
      | "UserList"
      | "UsersPaths"
      | "UsersPathsHash"
      | "addUserBulk"
      | "calculate"
      | "calculateWeek"
      | "calculator"
      | "changeFeeWallet"
      | "dao"
      | "feeWallet"
      | "floor"
      | "getBit"
      | "getOrderList"
      | "getUser"
      | "isChildOfParent"
      | "isDev"
      | "last_withdrawal_time"
      | "level_up_data_index"
      | "order_id"
      | "owner"
      | "payment((uint256,uint256,uint256,address,bytes32),address,address)"
      | "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"
      | "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"
      | "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"
      | "renounceOwnership"
      | "revokeAllowance"
      | "seller_id"
      | "setAllowance"
      | "setCalculator"
      | "switchToProduction"
      | "transferOwnership"
      | "user_id"
      | "withdrawToken1Balance"
      | "withdrawToken2Balance"
      | "withdrawWithDao"
      | "withraw_token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BVPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ListLevelUpDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "OrderList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SellerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "SellerList", values: [string]): string;
  encodeFunctionData(functionFragment: "Token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "Token2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UserAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UserLevelUpDateIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "UserList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "UsersPaths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UsersPathsHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUserBulk",
    values: [UsersStruct.ImportUserStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "floor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isChildOfParent",
    values: [UsersStruct.UserStruct, UsersStruct.UserStruct]
  ): string;
  encodeFunctionData(functionFragment: "isDev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "last_withdrawal_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "level_up_data_index",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "order_id", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payment((uint256,uint256,uint256,address,bytes32),address,address)",
    values: [Payments.PaymentDataStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payment((uint256,uint256,uint256,address,bytes32),uint256,address)",
    values: [Payments.PaymentDataStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)",
    values: [Payments.PaymentDataStruct, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)",
    values: [Payments.PaymentDataStruct, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllowance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "seller_id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "user_id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken1Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken2Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithDao",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withraw_token",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BVPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ListLevelUpDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OrderList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SellerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SellerList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Token2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserLevelUpDateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UserList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UsersPaths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UsersPathsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChildOfParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last_withdrawal_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "level_up_data_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "order_id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payment((uint256,uint256,uint256,address,bytes32),address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payment((uint256,uint256,uint256,address,bytes32),uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller_id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken1Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken2Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withraw_token",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Gateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    OrderList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        id: BigNumber;
        user_id: BigNumber;
        seller_id: BigNumber;
        bv_value: BigNumber;
        sv_value: BigNumber;
        seller_token: BigNumber;
        date: BigNumber;
        data: string;
        exists: boolean;
      }
    >;

    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        seller_addr: string;
        bv_value: BigNumber;
        token_withdraw_value: BigNumber;
        exists: boolean;
      }
    >;

    Token1(overrides?: CallOverrides): Promise<[string]>;

    Token2(overrides?: CallOverrides): Promise<[string]>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculate(
      ordersId: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateWeek(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    feeWallet(overrides?: CallOverrides): Promise<[string]>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderList(
      _order_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDev(overrides?: CallOverrides): Promise<[boolean]>;

    last_withdrawal_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    level_up_data_index(overrides?: CallOverrides): Promise<[BigNumber]>;

    order_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "payment((uint256,uint256,uint256,address,bytes32),address,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_addr: string,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_id: BigNumberish,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeAllowance(
      spender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    seller_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCalculator(
      cal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    user_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawToken1Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken2Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawWithDao(
      withdraw_amount: BigNumberish,
      withdrawal_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withraw_token(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ListLevelUpDate(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

  OrderList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      id: BigNumber;
      user_id: BigNumber;
      seller_id: BigNumber;
      bv_value: BigNumber;
      sv_value: BigNumber;
      seller_token: BigNumber;
      date: BigNumber;
      data: string;
      exists: boolean;
    }
  >;

  SellerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  SellerList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      seller_addr: string;
      bv_value: BigNumber;
      token_withdraw_value: BigNumber;
      exists: boolean;
    }
  >;

  Token1(overrides?: CallOverrides): Promise<string>;

  Token2(overrides?: CallOverrides): Promise<string>;

  UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  UserLevelUpDateIndex(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  UserList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      UsersStruct.BusinessValueStructOutput,
      UsersStruct.LastOrderStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      id: BigNumber;
      bv: UsersStruct.BusinessValueStructOutput;
      last_order: UsersStruct.LastOrderStructOutput;
      depth: BigNumber;
      pending_withdraw: BigNumber;
      levelup_count: BigNumber;
      lastweek: BigNumber;
      step: BigNumber;
      pending_voucher: BigNumber;
      exists: boolean;
      data: string;
    }
  >;

  UsersPaths(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  UsersPathsHash(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addUserBulk(
    users: UsersStruct.ImportUserStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculate(
    ordersId: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateWeek(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculator(overrides?: CallOverrides): Promise<string>;

  changeFeeWallet(
    wallet_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  feeWallet(overrides?: CallOverrides): Promise<string>;

  floor(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBit(
    b: BytesLike,
    position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderList(
    _order_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getUser(
    user_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isChildOfParent(
    parent: UsersStruct.UserStruct,
    child: UsersStruct.UserStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDev(overrides?: CallOverrides): Promise<boolean>;

  last_withdrawal_time(overrides?: CallOverrides): Promise<BigNumber>;

  level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

  order_id(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "payment((uint256,uint256,uint256,address,bytes32),address,address)"(
    _payment: Payments.PaymentDataStruct,
    parent_addr: string,
    call_back: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"(
    _payment: Payments.PaymentDataStruct,
    parent_id: BigNumberish,
    call_back: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"(
    _payment: Payments.PaymentDataStruct,
    payer_user: string,
    from_user: string,
    parent_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"(
    _payment: Payments.PaymentDataStruct,
    payer_user: string,
    from_user: string,
    parent_addr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeAllowance(
    spender: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  seller_id(overrides?: CallOverrides): Promise<BigNumber>;

  setAllowance(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCalculator(
    cal: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  switchToProduction(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  user_id(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawToken1Balance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken2Balance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawWithDao(
    withdraw_amount: BigNumberish,
    withdrawal_address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withraw_token(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; level: BigNumber }>;

    OrderList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        id: BigNumber;
        user_id: BigNumber;
        seller_id: BigNumber;
        bv_value: BigNumber;
        sv_value: BigNumber;
        seller_token: BigNumber;
        date: BigNumber;
        data: string;
        exists: boolean;
      }
    >;

    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        seller_addr: string;
        bv_value: BigNumber;
        token_withdraw_value: BigNumber;
        exists: boolean;
      }
    >;

    Token1(overrides?: CallOverrides): Promise<string>;

    Token2(overrides?: CallOverrides): Promise<string>;

    UserAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        UsersStruct.BusinessValueStructOutput,
        UsersStruct.LastOrderStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        id: BigNumber;
        bv: UsersStruct.BusinessValueStructOutput;
        last_order: UsersStruct.LastOrderStructOutput;
        depth: BigNumber;
        pending_withdraw: BigNumber;
        levelup_count: BigNumber;
        lastweek: BigNumber;
        step: BigNumber;
        pending_voucher: BigNumber;
        exists: boolean;
        data: string;
      }
    >;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculate(
      ordersId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateWeek(overrides?: CallOverrides): Promise<void>;

    calculator(overrides?: CallOverrides): Promise<string>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dao(overrides?: CallOverrides): Promise<string>;

    feeWallet(overrides?: CallOverrides): Promise<string>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderList(
      _order_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OrdersStruct.OrderStructOutput>;

    getUser(
      user_address: string,
      overrides?: CallOverrides
    ): Promise<UsersStruct.UserStructOutput>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    isDev(overrides?: CallOverrides): Promise<boolean>;

    last_withdrawal_time(overrides?: CallOverrides): Promise<BigNumber>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    order_id(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "payment((uint256,uint256,uint256,address,bytes32),address,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_addr: string,
      call_back: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_id: BigNumberish,
      call_back: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAllowance(spender: string, overrides?: CallOverrides): Promise<void>;

    seller_id(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCalculator(cal: string, overrides?: CallOverrides): Promise<void>;

    switchToProduction(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken1Balance(overrides?: CallOverrides): Promise<void>;

    withdrawToken2Balance(overrides?: CallOverrides): Promise<void>;

    withdrawWithDao(
      withdraw_amount: BigNumberish,
      withdrawal_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withraw_token(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BVPlan(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OrderList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SellerList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    Token1(overrides?: CallOverrides): Promise<BigNumber>;

    Token2(overrides?: CallOverrides): Promise<BigNumber>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UserList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculate(
      ordersId: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateWeek(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderList(
      _order_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDev(overrides?: CallOverrides): Promise<BigNumber>;

    last_withdrawal_time(overrides?: CallOverrides): Promise<BigNumber>;

    level_up_data_index(overrides?: CallOverrides): Promise<BigNumber>;

    order_id(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "payment((uint256,uint256,uint256,address,bytes32),address,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_addr: string,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_id: BigNumberish,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeAllowance(
      spender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    seller_id(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCalculator(
      cal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    user_id(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken1Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken2Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawWithDao(
      withdraw_amount: BigNumberish,
      withdrawal_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withraw_token(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BVPlan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ListLevelUpDate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OrderList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UserAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserLevelUpDateIndex(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPaths(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UsersPathsHash(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addUserBulk(
      users: UsersStruct.ImportUserStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculate(
      ordersId: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateWeek(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFeeWallet(
      wallet_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floor(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBit(
      b: BytesLike,
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderList(
      _order_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getUser(
      user_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isChildOfParent(
      parent: UsersStruct.UserStruct,
      child: UsersStruct.UserStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_withdrawal_time(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level_up_data_index(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    order_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "payment((uint256,uint256,uint256,address,bytes32),address,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_addr: string,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "payment((uint256,uint256,uint256,address,bytes32),uint256,address)"(
      _payment: Payments.PaymentDataStruct,
      parent_id: BigNumberish,
      call_back: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,uint256)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paymentFrom((uint256,uint256,uint256,address,bytes32),address,address,address)"(
      _payment: Payments.PaymentDataStruct,
      payer_user: string,
      from_user: string,
      parent_addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeAllowance(
      spender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    seller_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCalculator(
      cal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    switchToProduction(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    user_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken1Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken2Balance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawWithDao(
      withdraw_amount: BigNumberish,
      withdrawal_address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withraw_token(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
