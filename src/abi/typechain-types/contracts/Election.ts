/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ElectionInterface extends utils.Interface {
  functions: {
    "beCandidate()": FunctionFragment;
    "candidateAddresses(uint256)": FunctionFragment;
    "candidates(address,uint256)": FunctionFragment;
    "checkVotingPeriod()": FunctionFragment;
    "cycleCount()": FunctionFragment;
    "cycleUnit()": FunctionFragment;
    "dnmToken()": FunctionFragment;
    "getCandidateVote(address)": FunctionFragment;
    "getVoterStake(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWinners()": FunctionFragment;
    "stake()": FunctionFragment;
    "startTime()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(address,uint256)": FunctionFragment;
    "votePeriod()": FunctionFragment;
    "voteWithStake(address,uint256)": FunctionFragment;
    "voterStake(address)": FunctionFragment;
    "voterStakeCount(address,uint256)": FunctionFragment;
    "withdrawStake()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beCandidate"
      | "candidateAddresses"
      | "candidates"
      | "checkVotingPeriod"
      | "cycleCount"
      | "cycleUnit"
      | "dnmToken"
      | "getCandidateVote"
      | "getVoterStake"
      | "isOwner"
      | "owner"
      | "owners"
      | "renounceOwnership"
      | "setWinners"
      | "stake"
      | "startTime"
      | "transferOwnership"
      | "vote"
      | "votePeriod"
      | "voteWithStake"
      | "voterStake"
      | "voterStakeCount"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cycleUnit", values?: undefined): string;
  encodeFunctionData(functionFragment: "dnmToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidateVote",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterStake",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWinners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteWithStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voterStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voterStakeCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycleCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycleUnit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dnmToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteWithStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterStakeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Election extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beCandidate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    candidateAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkVotingPeriod(overrides?: CallOverrides): Promise<[boolean]>;

    cycleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    dnmToken(overrides?: CallOverrides): Promise<[string]>;

    getCandidateVote(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoterStake(
      voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWinners(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(overrides?: CallOverrides): Promise<[string]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vote(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    votePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteWithStake(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voterStake(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voterStakeCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawStake(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  beCandidate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  candidateAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  candidates(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkVotingPeriod(overrides?: CallOverrides): Promise<boolean>;

  cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

  cycleUnit(overrides?: CallOverrides): Promise<BigNumber>;

  dnmToken(overrides?: CallOverrides): Promise<string>;

  getCandidateVote(
    candidate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterStake(voter: string, overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWinners(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(overrides?: CallOverrides): Promise<string>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vote(
    candidate: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  votePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  voteWithStake(
    candidate: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voterStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  voterStakeCount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawStake(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    beCandidate(overrides?: CallOverrides): Promise<void>;

    candidateAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    candidates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkVotingPeriod(overrides?: CallOverrides): Promise<boolean>;

    cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

    cycleUnit(overrides?: CallOverrides): Promise<BigNumber>;

    dnmToken(overrides?: CallOverrides): Promise<string>;

    getCandidateVote(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStake(voter: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWinners(overrides?: CallOverrides): Promise<void>;

    stake(overrides?: CallOverrides): Promise<string>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      candidate: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    votePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    voteWithStake(
      candidate: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voterStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voterStakeCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawStake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    beCandidate(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    candidateAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

    cycleUnit(overrides?: CallOverrides): Promise<BigNumber>;

    dnmToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCandidateVote(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterStake(voter: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWinners(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vote(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    votePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    voteWithStake(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voterStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voterStakeCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawStake(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beCandidate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    candidateAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkVotingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dnmToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCandidateVote(
      candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterStake(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWinners(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vote(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    votePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteWithStake(
      candidate: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voterStake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voterStakeCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
