/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Sellers {
  export type SellerStruct = {
    id: BigNumberish;
    seller_addr: string;
    bv_value: BigNumberish;
    token_withdraw_value: BigNumberish;
    exists: boolean;
  };

  export type SellerStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    seller_addr: string;
    bv_value: BigNumber;
    token_withdraw_value: BigNumber;
    exists: boolean;
  };
}

export interface SellersInterface extends utils.Interface {
  functions: {
    "SellerAddress(uint256)": FunctionFragment;
    "SellerList(address)": FunctionFragment;
    "getSeller(uint256,bool)": FunctionFragment;
    "getSellerList(uint256,uint256)": FunctionFragment;
    "seller_id()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SellerAddress"
      | "SellerList"
      | "getSeller"
      | "getSellerList"
      | "seller_id"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SellerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "SellerList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSeller",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seller_id", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "SellerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SellerList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSeller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller_id", data: BytesLike): Result;

  events: {
    "AddedSaleVolume(address,uint256,uint256)": EventFragment;
    "CreatedSeller(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSaleVolume"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedSeller"): EventFragment;
}

export interface AddedSaleVolumeEventObject {
  seller_addr: string;
  added_volume: BigNumber;
  current_bv: BigNumber;
}
export type AddedSaleVolumeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AddedSaleVolumeEventObject
>;

export type AddedSaleVolumeEventFilter = TypedEventFilter<AddedSaleVolumeEvent>;

export interface CreatedSellerEventObject {
  id: BigNumber;
  seller_addr: string;
}
export type CreatedSellerEvent = TypedEvent<
  [BigNumber, string],
  CreatedSellerEventObject
>;

export type CreatedSellerEventFilter = TypedEventFilter<CreatedSellerEvent>;

export interface Sellers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SellersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        seller_addr: string;
        bv_value: BigNumber;
        token_withdraw_value: BigNumber;
        exists: boolean;
      }
    >;

    getSeller(
      _seller_id: BigNumberish,
      ignore_vaildation: boolean,
      overrides?: CallOverrides
    ): Promise<[Sellers.SellerStructOutput]>;

    getSellerList(
      fromId: BigNumberish,
      toId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Sellers.SellerStructOutput[]]>;

    seller_id(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  SellerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  SellerList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      seller_addr: string;
      bv_value: BigNumber;
      token_withdraw_value: BigNumber;
      exists: boolean;
    }
  >;

  getSeller(
    _seller_id: BigNumberish,
    ignore_vaildation: boolean,
    overrides?: CallOverrides
  ): Promise<Sellers.SellerStructOutput>;

  getSellerList(
    fromId: BigNumberish,
    toId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Sellers.SellerStructOutput[]>;

  seller_id(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        seller_addr: string;
        bv_value: BigNumber;
        token_withdraw_value: BigNumber;
        exists: boolean;
      }
    >;

    getSeller(
      _seller_id: BigNumberish,
      ignore_vaildation: boolean,
      overrides?: CallOverrides
    ): Promise<Sellers.SellerStructOutput>;

    getSellerList(
      fromId: BigNumberish,
      toId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Sellers.SellerStructOutput[]>;

    seller_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddedSaleVolume(address,uint256,uint256)"(
      seller_addr?: string | null,
      added_volume?: null,
      current_bv?: null
    ): AddedSaleVolumeEventFilter;
    AddedSaleVolume(
      seller_addr?: string | null,
      added_volume?: null,
      current_bv?: null
    ): AddedSaleVolumeEventFilter;

    "CreatedSeller(uint256,address)"(
      id?: BigNumberish | null,
      seller_addr?: string | null
    ): CreatedSellerEventFilter;
    CreatedSeller(
      id?: BigNumberish | null,
      seller_addr?: string | null
    ): CreatedSellerEventFilter;
  };

  estimateGas: {
    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SellerList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSeller(
      _seller_id: BigNumberish,
      ignore_vaildation: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerList(
      fromId: BigNumberish,
      toId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seller_id(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SellerAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SellerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeller(
      _seller_id: BigNumberish,
      ignore_vaildation: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerList(
      fromId: BigNumberish,
      toId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seller_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
